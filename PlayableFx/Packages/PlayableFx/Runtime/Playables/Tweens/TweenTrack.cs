using UnityEngine;
using UnityEngine.Playables;
using UnityEngine.Timeline;

namespace PlayableFx
{
    /// <summary>
    /// The track that holds the tween clips.
    /// </summary>
    [TrackColor(148/255f, 222/255f, 89/255f)]
    [TrackBindingType(typeof(Transform))]
    [TrackClipType(typeof(TweenClip))]
    public class TweenTrack : TrackAsset
    {
        /// <summary>
        /// Constructs a Playable from a TimelineClip.
        /// </summary>
        /// <param name="graph">PlayableGraph that will own the playable.</param>
        /// <param name="gameObject">The GameObject that builds the PlayableGraph.</param>
        /// <param name="clip">The TimelineClip to construct a playable for.</param>
        /// <returns>A playable that will be set as an input to the Track Mixer playable, or Playable.Null if the clip does not have a valid PlayableAsset</returns>
        /// <exception cref="ArgumentException">Thrown if the specified PlayableGraph is not valid.</exception>
        /// <exception cref="ArgumentNullException">Thrown if the specified TimelineClip is not valid.</exception>
        /// <remarks>
        /// By default, this method invokes Playable.CreatePlayable, sets animated properties, and sets the speed of the created playable. Override this method to change this default implementation.
        /// </remarks>
        protected override Playable CreatePlayable(PlayableGraph graph, GameObject gameObject, TimelineClip clip)
        {
            // Playable.GetDuration() returns some super strange results when ClipCaps.Extrapolation is set.
            // In order to make extrapolation work intuitively with LitTween we need clip.duration, so we override CreatePlayable and pass the current clip to our behavior.
            // Thank my dude here https://forum.unity.com/threads/trying-to-get-percentage-of-the-way-through-playable.503672/#post-3281262
            // additional info here https://forum.unity.com/threads/timeline-adds-1-million-to-playable-getduration-when-extrapolation-is-set-to-anything-but-none.1324440/
            var playable = (ScriptPlayable<TweenBehavior>)base.CreatePlayable(graph, gameObject, clip);
            playable.GetBehaviour().Duration = (float)clip.duration;
            
            return playable;
        }

        /// <summary>
        /// Creates a mixer used to blend playables generated by clips on the track.
        /// </summary>
        /// <param name="graph">The graph to inject playables into</param>
        /// <param name="go">The GameObject that requested the graph.</param>
        /// <param name="inputCount">The number of playables from clips that will be inputs to the returned mixer</param>
        /// <returns>A handle to the [[Playable]] representing the mixer.</returns>
        /// <remarks>
        /// Override this method to provide a custom playable for mixing clips on a graph.
        /// </remarks>
        public override Playable CreateTrackMixer(PlayableGraph graph, GameObject gameObject, int inputCount)
        {
            var playable = ScriptPlayable<TweenTrackMixer>.Create(graph, inputCount);
            var transformBinding = gameObject
                .GetComponent<PlayableDirector>()
                .GetGenericBinding(this) as Transform;
            
            if (transformBinding is null)
                return playable;
            
            playable.GetBehaviour().Init(transformBinding);
            
            return playable;
        }
    }
}
